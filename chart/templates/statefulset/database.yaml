apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-mysql-database
  labels:
    release-name: {{ .Release.Name }}
    release-namespace: {{ .Release.Namespace }}
    environment: {{ .Values.environment }}
    app: {{ .Values.app.name }}
spec:
  selector:
    matchLabels:
      role: database
      app: {{ .Values.app.name }}
      release: {{ .Release.Name }}
  serviceName: {{ .Values.database.mysql.serviceName }}
  replicas: {{ .Values.database.mysql.replicaCount }}
  minReadySeconds: 10
  template:
    metadata:
      labels:
        role: database
        app: {{ .Values.app.name }}
        release: {{ .Release.Name }}
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: mysql
        image: {{ .Values.database.mysql.imageRepository}}:{{ .Values.database.mysql.imageTag }}
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-mysql-database-root
                key: password
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-mysql-database-user
                key: username
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-mysql-database-user
                key: password
          - name: MYSQL_DATABASE
            value: {{ .Values.database.mysql.dbName }}
        ports:
        - containerPort: {{ .Values.service.database.internalPort }}
          name: mysql
        volumeMounts:
        - name: mysql
          mountPath: /var/lib/mysql
        resources:
{{ toYaml .Values.app.backend.resources | indent 12 }}
  volumeClaimTemplates:
  - metadata:
      name: mysql
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Release.Name }}-local-storage
      resources:
        requests:
          storage: {{ .Values.database.mysql.storageAmmount }}