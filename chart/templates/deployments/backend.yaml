apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-springboot-backend
  labels:
    release-name: {{ .Release.Name }}
    release-namespace: {{ .Release.Namespace }}
    environment: {{ .Values.environment }}
    app: {{ .Values.app.name }}
spec:
  selector:
    matchLabels:
      role: backend
      app: {{ .Values.app.name }}
      release: {{ .Release.Name }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable }}
      maxSurge: {{ .Values.rollingUpdate.maxSurge }}
  replicas: {{ .Values.app.backend.replicaCount }}
  template:
    metadata:
      labels:
        role: backend
        app: {{ .Values.app.name }}
        release: {{ .Release.Name }}
    spec:
{{ if .Values.monitoring.enabled }}
      volumes:
        - name: elastic-apm-agent
          emptyDir: {}
{{ end }}
      initContainers:
        - name: init-springboot-backend
          image: busybox:{{ .Values.app.init.busybox.imageTag }}
          imagePullPolicy: {{ .Values.pullPolicy }}
          command: ['sh', '-c', "until nslookup {{ .Release.Name }}-mysql-database; do echo waiting for database service; sleep 2; done"]
{{ if .Values.monitoring.enabled }}
        - name: init-springboot-backend-elastic
          image: curlimages/curl:{{ .Values.app.init.curl.imageTag }}
          imagePullPolicy: {{ .Values.pullPolicy }}
          command: ['sh', '-c', "until [ $response == '200' ]; do response=$(curl --write-out '%{http_code}' --silent --output /dev/null https://{{ .Release.Name}}-kibana-kb-http:5601/login -k); echo waiting for elastic - $response; sleep 5; done" ]
        - name: elastic-java-agent
          image: docker.elastic.co/observability/apm-agent-java:1.12.0
          volumeMounts:
            - mountPath: /elastic/apm/agent
              name: elastic-apm-agent
          command: ['cp', '-v', '/usr/agent/elastic-apm-agent.jar', '/elastic/apm/agent']
{{ end }}
      containers:
        - name: springboot-backend
          image: {{ .Values.app.backend.imageRepository}}:{{ .Values.app.backend.imageTag }}
          imagePullPolicy: {{ .Values.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
          livenessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: {{ .Values.app.backend.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.app.backend.livenessProbe.periodSeconds }}
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: {{ .Values.app.backend.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.app.backend.readinessProbe.periodSeconds }}
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
{{ toYaml .Values.app.backend.resources | indent 12 }}
{{ if .Values.monitoring.enabled }}
          volumeMounts:
            - mountPath: /elastic/apm/agent
              name: elastic-apm-agent
{{ end }}
          env:
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-mysql-database-user
                  key: username
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-mysql-database-user
                  key: password
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://{{ .Release.Name }}-mysql-database:3306/{{ .Values.database.mysql.dbName }}?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
{{ if .Values.monitoring.enabled }}            
            - name: ELASTIC_APM_SERVER_URL
              value: "https://{{.Release.Name }}-apm-apm-http:8200"
            - name: ELASTIC_APM_SECRET_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-apm-apm-token
                  key: secret-token
            - name: ELASTIC_APM_SERVICE_NAME
              value: "polls-backend"
            - name: ELASTIC_APM_APPLICATION_PACKAGES
              value: "com.example.polls.PollsApplication"
            - name: ELASTIC_APM_ENVIRONMENT
              value: ""
            - name: ELASTIC_APM_VERIFY_SERVER_CERT
              value: "false"
            - name: JAVA_TOOL_OPTIONS
              value: -javaagent:/elastic/apm/agent/elastic-apm-agent.jar
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: KUBERNETES_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBERNETES_POD_UID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
{{ end }}