environment: prod #Used as a label for Kubernetes resources
pullPolicy: IfNotPresent #Policy for downloading Docker images
rollingUpdate:
  maxUnavailable: 1 #The number of pods that can be unavailable during the update process
  maxSurge: 1 #The number of pods that can be created above the desired amount of pods during an update

app:
  name: polls #Used as a label for Kubernetes resources
  dnsName: app.polls.com #DNS name to access the application. Add this to your hosts file
  frontend:
    imageRepository: guilleguerrero/polls-frontend #Frontend image repository name
    imageTag: 1.0.0 #Frontend image version
    replicaCount: 2 #Number of replicas for the frontend
    resources: #Resources for the frontend (this entire block is used in the frontend deployment).
      limits:
        cpu: 0.5
        memory: "700Mi"
      requests:
        cpu: 0.5
        memory: "300Mi"
    autoscaling:
      maxReplicas: 2 #Maximum number of replicas for frontend autoscaling
      cpuAveragePercentageUtilization: 60 #Percentage of CPU usage which, if exceeded, auto-scaling is applied to the frontend
    livenessProbe:
      initialDelaySeconds: 30 #Number of seconds to wait before starting the first liveness probe for the frontend
      periodSeconds: 10 #Number of seconds to wait before performing a new liveness probe for the frontend
    readinessProbe:
      initialDelaySeconds: 5 #Number of seconds to wait before starting the first readiness probe for the frontend
      periodSeconds: 10 #Number of seconds to wait before performing a new readiness probe for the frontend
  backend:
    imageRepository: guilleguerrero/polls-backend #Backend image repository name
    imageTag: 1.0.0 #Backend image version
    replicaCount: 2 #Number of replicas for the backend
    resources: #Resources for the backend (this entire block is used in the backend deployment).
      limits:
        cpu: 0.5
        memory: "1000Mi"
      requests:
        cpu: 0.5
        memory: "500Mi"
    autoscaling:
      maxReplicas: 2 #Maximum number of replicas for backend autoscaling
      cpuAveragePercentageUtilization: 60 #Percentage of CPU usage which, if exceeded, auto-scaling is applied to the backend
    livenessProbe:
      initialDelaySeconds: 250 #Number of seconds to wait before starting the first liveness probe for the backend
      periodSeconds: 10 #Number of seconds to wait before performing a new liveness probe for the backend
    readinessProbe:
      initialDelaySeconds: 300 #Number of seconds to wait before starting the first readiness probe for the backend
      periodSeconds: 10 #Number of seconds to wait before performing a new readiness probe for the backend
  init:
    busybox:
      imageTag: 1.28 #Busybox image version (used for init-containers)
    curl:
      imageTag: 8.4.0 #Curl image version (used for init-containers)

database:
  mysql:
    serviceName: mysql-database #MYSQL Database service name
    imageTag: 5.6 #MYSQL Database image version
    storageAmmount: 500Mi #Size of storage used for the MYSQL database
    dbName: polls #DB name for the application
    resources: #Resources for the MYSQL database (this entire block is used in the database statefulset).
      limits:
        cpu: 0.5
        memory: "1000Mi"
      requests:
        cpu: 0.5
        memory: "500Mi"

service:
  database:
    externalPort: 3306 #External port (port on which the service is published) for the database
  frontend:
    externalPort: 80 #External port (port on which the service is published) for the frontend
  backend:
    externalPort: 8080 #External port (port on which the service is published) for the backend

monitoring:
  enabled: true #Enable/Disable application monitoring using Elastic Stack
  dnsName: kibana.polls.com #DNS name to access the monitoring solution. Add this to your hosts file
  elasticVersion: 8.11.1 #Elastic stack version to use

#Base64 encoded value. Use command base64 for encoding/decoding secrets.
#For encoding: echo -n <textplain-secret> | base64
#For decoding: echo <base64-secret> | base64 -d
secret:
  database:
    mysql:
      rootPassword: Y2hhbmdlbWU= #Root password for mysql database
      userUsername: Y2hhbmdlbWU= #Username for mysql database
      userPassword: Y2hhbmdlbWU= #User password for mysql database

#Chart dependencies values
metrics-server:
  args:
    - "--kubelet-insecure-tls" #This is necessary so that the certificates are not verified in case docker desktop is used

ingress-nginx:
  controller:
    podAnnotations: #These annotations are necessary for collecting NGINX access and error logs using filebeat and subsequently sending them to Elasticsearch.
      co.elastic.logs/module: nginx
      co.elastic.logs/fileset.stdout: access
      co.elastic.logs/fileset.stderr: error

eck-operator:
  installCRDs: false #Instruct the Elastic operator not to deploy the Elastic CRDs since these are deployed as part of the chart.
